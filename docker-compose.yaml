# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#   http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied.  See the License for the
# specific language governing permissions and limitations
# under the License.
#

# Basic Airflow cluster configuration for CeleryExecutor with Redis and PostgreSQL.
#
# WARNING: This configuration is for local development. Do not use it in a production deployment.
#
# This configuration supports basic configuration using environment variables or an .env file
# The following variables are supported:
#
# AIRFLOW_IMAGE_NAME           - Docker image name used to run Airflow.
#                                Default: apache/airflow:3.0.6
# AIRFLOW_UID                  - User ID in Airflow containers
#                                Default: 50000
# AIRFLOW_PROJ_DIR             - Base path to which all the files will be volumed.
#                                Default: .
# Those configurations are useful mostly in case of standalone testing/running Airflow in test/try-out mode
#
# _AIRFLOW_WWW_USER_USERNAME   - Username for the administrator account (if requested).
#                                Default: airflow
# _AIRFLOW_WWW_USER_PASSWORD   - Password for the administrator account (if requested).
#                                Default: airflow
# _PIP_ADDITIONAL_REQUIREMENTS - Additional PIP requirements to add when starting all containers.
#                                Use this option ONLY for quick checks. Installing requirements at container
#                                startup is done EVERY TIME the service is started.
#                                A better way is to build a custom image or extend the official image
#                                as described in https://airflow.apache.org/docs/docker-stack/build.html.
#                                Default: ''
#
# Feel free to modify this file to suit your needs.
#---
x-airflow-common:
  &airflow-common
  # In order to add custom dependencies or upgrade provider distributions you can use your extended image.
  # Comment the image line, place your Dockerfile in the directory where you placed the docker-compose.yaml
  # and uncomment the "build" line below, Then run `docker-compose build` to build the images.
#  image: ${AIRFLOW_IMAGE_NAME:-apache/airflow:3.0.6}
  build:
    context: ./airflow
    dockerfile: Dockerfile
    args:
      AIRFLOW_VERSION: 3.0.6
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__CORE__AUTH_MANAGER: airflow.providers.fab.auth_manager.fab_auth_manager.FabAuthManager
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__EXECUTION_API_SERVER_URL: 'http://airflow-apiserver:8080/execution/'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
    AIRFLOW__SCHEDULER__CREATE_CRON_DATA_INTERVALS: 'true'
    _PIP_ADDITIONAL_REQUIREMENTS: ${_PIP_ADDITIONAL_REQUIREMENTS:-}
    AWS_ACCESS_KEY_ID: admin
    AWS_SECRET_ACCESS_KEY: password
    AWS_DEFAULT_REGION: us-east-1
  volumes:
    - ${AIRFLOW_PROJ_DIR:-.}/dags:/opt/airflow/dags
    - ${AIRFLOW_PROJ_DIR:-.}/logs:/opt/airflow/logs
    - ${AIRFLOW_PROJ_DIR:-.}/config:/opt/airflow/config
    - ${AIRFLOW_PROJ_DIR:-.}/plugins:/opt/airflow/plugins
    - /var/run/docker.sock:/var/run/docker.sock
    - /tmp:/tmp
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    postgres:
      condition: service_healthy

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - ./volumes/airflow/db/data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 10s
      retries: 5
      start_period: 5s
    restart: always
    ports:
      - "5435:5432"

  airflow-apiserver:
    <<: *airflow-common
    command: api-server
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/api/v2/version"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-dag-processor:
    <<: *airflow-common
    command: dag-processor
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    restart: always
    depends_on:
      postgres:
        condition: service_healthy
      airflow-init:
        condition: service_completed_successfully

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
          export AIRFLOW_UID=$$(id -u)
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        echo
        echo "Creating missing opt dirs if missing:"
        echo
        mkdir -v -p /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Airflow version:"
        /entrypoint airflow version
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Running airflow config list to create default config file if missing."
        echo
        /entrypoint airflow config list >/dev/null
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Change ownership of files in /opt/airflow to ${AIRFLOW_UID}:0"
        echo
        chown -R "${AIRFLOW_UID}:0" /opt/airflow/
        echo
        echo "Change ownership of files in shared volumes to ${AIRFLOW_UID}:0"
        echo
        chown -v -R "${AIRFLOW_UID}:0" /opt/airflow/{logs,dags,plugins,config}
        echo
        echo "Files in shared volumes:"
        echo
        ls -la /opt/airflow/{logs,dags,plugins,config}

    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
#
##  dwh:
##    image: postgres:15
##    container_name: dwh_postgres
##    restart: always
##    environment:
##      POSTGRES_USER: dbt_user
##      POSTGRES_PASSWORD: dbt_password
##      POSTGRES_DB: dwh
##    ports:
##      - "5433:5432"  # Using 5433 to avoid conflict with OpenMetadata's postgres on 5432
##    volumes:
##      - ./volumes/dwh/data:/var/lib/postgresql/data
##      - ./dwh/docker/init.sql:/docker-entrypoint-initdb.d/init.sql
##    healthcheck:
##      test: ["CMD-SHELL", "pg_isready -U dbt_user -d dwh"]
##      interval: 10s
##      timeout: 5s
##      retries: 5




  ecommerce-db:
    image: postgres:15
    environment:
      POSTGRES_USER: ecom
      POSTGRES_PASSWORD: ecom
      POSTGRES_DB: ecom
    ports:
      - "5434:5432"
    volumes:
      - ./ecommerce-db/db/init:/docker-entrypoint-initdb.d
      - ./volumes/ecommerce-db/db/data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecom -d ecom"]
      interval: 5s
      timeout: 5s
      retries: 10
      start_period: 5s

#  ############################
#  # the dashboarding layer
#  ############################
#  dashboard:
#    build: ./dashboard/
#    environment:
#      TRINO_HOST: trino-coordinator
#      TRINO_PORT: 8080
#      TRINO_USER: airflow
#      TRINO_CATALOG: iceberg         # Trino catalog configured for Iceberg
#      TRINO_SCHEMA: marts             # dbt schema / namespace
#    depends_on:
#      - trino-coordinator
#    ports:
#      - "8501:8501"
#
#

  ########################################################################################
  # lakehouse infrastructure
  ########################################################################################
  ############################
  # storage layer
  ############################
  minio:
    image: minio/minio:latest
    volumes:
      - ./volumes/s3:/data
    ports:
      - 9000:9000
      - 9001:9001
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=password
    command: ["server", "/data", "--console-address", ":9001"]

  mc:
    depends_on:
      - minio
    image: minio/mc
    container_name: mc
    environment:
      - AWS_ACCESS_KEY_ID=admin
      - AWS_SECRET_ACCESS_KEY=password
      - AWS_REGION=us-east-1
    entrypoint: >
      /bin/sh -c "
      until /usr/bin/mc alias set maninblack http://minio:9000 admin password; do
        echo '...waiting for minio...' && sleep 1;
      done &&
      /usr/bin/mc mb -p maninblack/lake &&
      /usr/bin/mc anonymous set public maninblack/lake &&
      /usr/bin/mc mb -p maninblack/lakehouse &&
      /usr/bin/mc anonymous set public maninblack/lakehouse &&
      tail -f /dev/null
      "

  ############################
  # the lakehouse catalog
  ############################
  nessie-catalog:
    image: projectnessie/nessie:0.76.6
    container_name: nessie-catalog
    ports:
      - "19120:19120"
    environment:
      # Point to collector (NOT localhost)
      OTEL_RESOURCE_ATTRIBUTES: service.name=nessie-catalog
      OTEL_EXPORTER_OTLP_ENDPOINT: http://otel-collector:4317

    depends_on:
      - mc
  ############################
  # the query engine
  ############################
  trino-coordinator:
    image: trinodb/trino:476
    container_name: trino-coordinator
    mem_limit: 2g
    cpus: 2
    ports:
      - "8081:8080"
    volumes:
      - ./trino/trino_config/coordinator/config.properties:/etc/trino/config.properties
      - ./trino/trino_config/coordinator/init.sql:/etc/trino/init.sql
      - ./trino/trino_config/catalog:/etc/trino/catalog
      - ./volumes/trino/coordinator/logs:/var/log/trino
    depends_on:
      - nessie-catalog
      - mc

  trino-worker-1:
    image: trinodb/trino:476
    container_name: trino-worker-1
    mem_limit: 3g
    cpus: 3
    volumes:
      - ./trino/trino_config/worker/config.properties:/etc/trino/config.properties
      - ./trino/trino_config/catalog:/etc/trino/catalog
      - ./volumes/trino/worker-1/logs:/var/log/trino
    depends_on:
      - trino-coordinator

#  trino-worker-2:
#    image: trinodb/trino:476
#    container_name: trino-worker-2
#    mem_limit: 1500m
#    cpus: 2
#    volumes:
#      - ./trino/trino_config/worker/config.properties:/etc/trino/config.properties
#      - ./trino/trino_config/catalog:/etc/trino/catalog
#      - ./volumes/trino/worker-2/logs:/var/log/trino
#    depends_on:
#      - trino-coordinator

